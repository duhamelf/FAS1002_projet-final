---
title: "Titre de votre page d'importation"
title-block-banner: true
description: | 
  Petite description de cette page.
# à changer
date: "2022-12-21"
# Modifier les détails que vous voulez
author:
  - name: "Frédérik-Xavier Duhamel"
    # Votre site web perso ou github
    url: https://github.com/VOTREUSERNAME
    # les champs d'affiliation sont optionnels, vous pouvez les
    # comment out en ajoutant un # devant.
    affiliation: FAS1002
    affiliation-url: https://FAS1002.github.io/A22
    # changer pour votre propre orcid id
    # https://orcid.org/ pour vous inscrire.
    orcid: 0000-0000-0000-0000

# TRUE == Générer une citation pour cette page précise. Pour enlever, mettre false.
citation: true
# Inclure les références que vous utilisez dans vos rapports. Je conseille Zotero pour construire
# ce fichier ou de connecter RStudio directement pour pouvoir citer avec @nom-de-reference.
bibliography: references.bib
---

Il est maintenant le temps de décrire votre projet avant de passer au document suivant, soit l'importation et la manipulation des données.

Je vous conseille d'écrire cette partie en dernier, une fois que vous aurez déjà vos résultats et figures afin d'éviter de réécrire cette page plusieurs fois.

::: callout-important
N'oubliez pas d'inclure vos références sur chacune des pages!
:::

Par exemple:

> Les données proviennent entre autres de @owidenergy.

```{r echo=FALSE, warning=FALSE, message=FALSE}

library(countrycode)

library(fs)
library(lubridate)
library(tidyverse)
library(skimr)
library(gapminder)
library(googlesheets4)
library(knitr)
```

```{r download, cache=TRUE}

URL1 <- "https://nyc3.digitaloceanspaces.com/owid-public/data/co2/owid-co2-data.csv"

base_path <- path("data", "raw")

fname <- paste(today(), "GHG-emissions.csv", 
               sep = "_")

fpath <- path(base_path, fname)

download.file(url = URL1, 
              destfile = fpath) 

df1 <- read_csv(file = path(base_path, fname))
```

```{r}


# download une fois par jour 


 if (!file.exists(fname)) {
    download.file(url = URL1,
                  destfile = fpath)
    paste("Le fichier",
          fname,
          "n'existait pas, il a donc été téléchargé à l'instant."
)
  } else {
    print(paste("Le fichier",
                fname,
                "existe déjà, il ne sera pas téléchargé à nouveau.")
) }


# ne fonctionne pas, télécharge mm si fichier existe... comment automatiser? 

----


URL1 <- "https://nyc3.digitaloceanspaces.com/owid-public/data/co2/owid-co2-data.csv"

base_path <- path("data", "raw")

fname <- paste(today(), "GHG-emissions.csv", 
               sep = "_")

fpath <- path(base_path, fname)


download.file(url = URL1, 
              destfile = fpath) 

df1 <- read_csv(file = path(base_path, fname))

```

```{r}

download.file("https://docs.google.com/spreadsheets/d/1RheSon1-q4vFc3AGyupVPH6ptEByE-VtnjOCselU0PE/export?format=xlsx", destfile = "./data/raw/life_exp_data.xlsx")

# importer une page particuliere avec package read xl

df2 <-  readxl::read_xlsx("./data/raw/life_exp_data.xlsx", sheet = "data-for-countries-etc-by-year")

```

```{r}
#renommer colonne mauvais nom pour fct select plus bas

df2 <- df2 %>% 
  rename(
    life_exp = "Life expectancy",
    country = "name",
    year = "time", 
    iso_code = "geo"
    )


# pour avoir iso_code en majuscule aussi comme df1, est-ce nécessaire tho?

df2 <- data.frame(lapply(df2, function(v) {
  if (is.character(v)) return(toupper(v))
  else return(v)
}))


df2 <- as_tibble(df2)
#consigne, mais ecq ça change qqchose? 
```

```{r}

#sélectionner seulement quelques variables

df1 <- df1 %>% dplyr::select(iso_code, country, year, gdp, co2_per_capita)

df1 <- as_tibble(df1)

```

```{r}


library(countrycode)



df2$continent <- countrycode(sourcevar = df2[, "country"],
                            origin = "country.name",
                            destination = "continent")

#fonctionne pr df2! Marche pas pr df1 pcq il y a déjà des continents dans country pê?? extraire autrement 


```

```{r}
 
#retirer rows avec contintent : 


df7 <- df1 %>%
  filter(!grepl("Africa|Asia|North America|South America|Central America|Oceania|Europe", country))

# fonctionne pour enlever les rows, mais toujours pas capable de faire une nouvelle colonne continent avec ce qui suit : 


df7$continent <- countrycode(sourcevar = df2[, "country"],
                            origin = "country.name",
                            destination = "continent")

```

Vous pouvez, voire devriez, inclure plus d'éléments que ceux demandés ci-bas afin de produire un rapport plus exhaustif:

○ Présenter un ou des beaux tableaux avec plusieurs variables d'intérêts en montrant les statistiques descriptives classiques (moyennes, écart-types, données manquantes, etc.). À vous de déterminer comment il est mieux de présenter les données globales.

■ Conseil: vous avez vu ou lu comment calculer plusieurs statistiques en même temps.

■ Présenter les mêmes tableaux en regroupant les données par continents.

```{r}

#faut commencer par présenter données manquantes etc de tout le dataframe? 


#âge moyen par continent par année, ce genre de tableau qu'on veut? 

df8 <- group_by(df2, year, continent)
df9 <- summarise(df8, mean_life_exp = mean(life_exp, na.rm = TRUE))

#écart-type par année 

sd_annual <- group_by(df2, year)
summarise(df10, ecart = sd(life_exp, na.rm = TRUE))


#écart entre max et min life_exp jusqu'à ajd 

ecart <- df2 %>%
    group_by(year) %>%
    summarise(
        max = max(life_exp),
        min = min(life_exp), 
        ecart = max - min,
    )  %>%
    filter(year <= 2022)
    
# comment ajouter des colonnes qui montrent quel pays est max et quel pays est min??

max_min <- df2 %>%
    mutate(
        max_country = max(df2$life_exp)
    )


#moyenne life exp dans le monde par année 
mean_world <- df2 %>%
    group_by(year) %>% 
    summarise(
        mean_life_exp = mean(life_exp)
    )


```

○ Une variable d'intérêt que vous devrez calculer est le temps écoulé en jours entre la production (rendering) de votre rapport et la première année que des données ont été récoltées pour chacun des pays qui se trouvent dans le jeu de données de Life Expectancy at Birth.

```{r}

# pour enlever les NAs, mais semble qu'il n'y en a pas (mm nombre d'observations)
life_exp_ecomplete <- df2[complete.cases(df2), ]

# mettre year en format date, prendre 1er janvier ok? 

df2$year <- as.Date(ISOdate(df2$year, 1, 1))

# calcule le temps depuis l'année jusqu'à ajd, mais pour chaque année, ok? Comment isoler 1ère année de chaque pays? Ici à partir de 1800, mais ok? Pas vrmt utile, mm chose pour chaque pays... 

life_exp_complete <- df2 %>%
    group_by(country, year) %>%
    summarise(
        time_passed = today() - year
    ) %>%
    filter(year == "1800-01-01")
```

○ Vous pouvez également inclure des graphiques descriptifs représentant la distribution des données, etc.

○ Conseil: Il s'agit d'une bonne page pour rendre accessible le téléchargement des données.

```{r}

#graph life exp dans le temps 

ggplot(data = df2) + 
  geom_smooth(mapping = aes(x = year, y = life_exp))

```

```{r}

#graph écart max-min dans le temps 

ggplot(data = ecart) + 
  geom_smooth(mapping = aes(x = year, y = ecart))
```

		

1.  Pour l\'**analyse** des données de vos données, vous devrez en effectuer deux et décrire les
    motivations de ces analyses et vos résultats. Les analyses ne sont pas obligées d\'être hyper
    sophistiquées, mais le processus et l\'interprétation des résultats doivent se retrouver dans
    votre document. Il y a énormément de possibilités dans toutes les variables que vous avez.
    Comme il ne s\'agit pas d\'un cours de statistiques, la correction sera moins sévère à ce
    niveau. Tâchez tout de même de démontrer une rigueur peu importe votre niveau de
    connaissances! Tentez d\'expliquer vos résultats en décrivant ce qui peut les influencer, les
    forces et faiblesses, etc.

```{r}


# selecting one year to compare 

ghg_gdp_2010 <- df1 %>% 
    filter(year == 2010)

life_exp_2010 <- df2 %>% 
    filter(year == 2010)

#combining data frames for 2012 to have one row per country/year 

life_ghg_gdp_2010 <- life_exp_2010 %>% 
    select(-country, -year) %>% 
    left_join(ghg_gdp_2010, by = "iso_code")

# possible simplifier/automatiser changement d'année?


# graph ghg/gdp, good? 

ggplot(data = life_ghg_gdp_2010) + 
  geom_smooth(mapping = aes(x = co2_per_capita, y = gdp)) +
      geom_point(mapping = aes(x = co2_per_capita, y = gdp))

# graph ghg/life exp good? 

ggplot(data = life_ghg_gdp_2010) + 
  geom_smooth(mapping = aes(y = co2_per_capita, x = life_exp)) +
      geom_point(mapping = aes(y = co2_per_capita, x = life_exp))

```
