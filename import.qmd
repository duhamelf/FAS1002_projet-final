---
title: "Titre de votre page d'importation"
title-block-banner: true
description: | 
  Petite description de cette page.
# à changer
date: "2022-12-21"
# Modifier les détails que vous voulez
author:
  - name: "Frédérik-Xavier Duhamel"
    # Votre site web perso ou github
    url: https://github.com/VOTREUSERNAME
    # les champs d'affiliation sont optionnels, vous pouvez les
    # comment out en ajoutant un # devant.
    affiliation: FAS1002
    affiliation-url: https://FAS1002.github.io/A22
    # changer pour votre propre orcid id
    # https://orcid.org/ pour vous inscrire.
    orcid: 0000-0000-0000-0000

# TRUE == Générer une citation pour cette page précise. Pour enlever, mettre false.
citation: true
# Inclure les références que vous utilisez dans vos rapports. Je conseille Zotero pour construire
# ce fichier ou de connecter RStudio directement pour pouvoir citer avec @nom-de-reference.
bibliography: references.bib
---

Il est maintenant le temps de décrire votre projet avant de passer au document suivant, soit l'importation et la manipulation des données.

Je vous conseille d'écrire cette partie en dernier, une fois que vous aurez déjà vos résultats et figures afin d'éviter de réécrire cette page plusieurs fois.

::: callout-important
N'oubliez pas d'inclure vos références sur chacune des pages!
:::

Par exemple:

> Les données proviennent entre autres de @owidenergy.

```{r echo=FALSE, warning=FALSE, message=FALSE}

library(countrycode)
library(fs)
library(lubridate)
library(tidyverse)
library(skimr)
library(gapminder)
library(knitr)
install.packages("DT", repos = "http://cran.us.r-project.org")
library(DT)
```

```{r download, cache=TRUE}

# Télécharger le premier ensemble de données une fois par jour 
# pas cap de supprimer les données plus à jour wtf how???

URL1 <- "https://nyc3.digitaloceanspaces.com/owid-public/data/co2/owid-co2-data.csv"

base_path <- path("data", "raw")

fname <- paste(today(), "GHG-emissions.csv", 
               sep = "_")

fpath <- path(base_path, fname)

junk <- dir(path = base_path, pattern = "GHG-emissions.csv") 

 if (!file.exists(fpath)) {
    file.remove(junk)
    download.file(url = URL1,
                  destfile = fpath)
    paste("Le fichier",
          fpath,
          "n'existait pas, il a donc été téléchargé à l'instant."
)
  } else {
    print(paste("Le fichier",
                fpath,
                "existe déjà, il ne sera pas téléchargé à nouveau.")
) }

df1 <- read_csv(file = path(base_path, fname))

```

```{r}

# Télécharger le deuxième ensemble de données une fois par mois 
# pas cap de supprimer les données plus à jour wtf how???

URL2 <- "https://docs.google.com/spreadsheets/d/1RheSon1-q4vFc3AGyupVPH6ptEByE-VtnjOCselU0PE/export?format=xlsx"

base_path <- path("data", "raw")

fname2 <- paste(today(), "life_exp_data.xlsx", 
               sep = "_")

fpath2 <- path(base_path, fname2)

x <- list.files(path = base_path, pattern = "life_exp_data.xlsx")

y <- stringr::str_extract(string = x, pattern = "[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]")

y <- as_date(y)

if (identical(x, character(0))) {
    download.file(url = URL2, 
              destfile = fpath2) 
        paste("Le fichier",
          fpath2,
          "n'existait pas, il a donc été téléchargé à l'instant.")
  } else if (lubridate::month(y) != lubridate::month(today())) {
          unlink(x)
          download.file(url = URL2, 
                        destfile = fpath2) 
          print(paste("Le fichier",
                    fpath2,
                    "n'existait pas, il a donc été téléchargé à l'instant.")
    )
  } else {
      print(paste("Le fichier",
                fpath2,
                "existe déjà, il ne sera pas téléchargé à nouveau.")
      )
  }

# Importer une page en particulier 

df2 <- readxl::read_xlsx(path = fpath2, sheet = "data-for-countries-etc-by-year")



#utiliser ça en attendant :  

# download.file("https://docs.google.com/spreadsheets/d/1RheSon1-q4vFc3AGyupVPH6ptEByE-VtnjOCselU0PE/export?format=xlsx", destfile = "./data/raw/life_exp_data.xlsx")

# df2 <-  readxl::read_xlsx("./data/raw/life_exp_data.xlsx", sheet = "data-for-countries-etc-by-year")

```

```{r}

# Renommer certaines colonnes pour faciliter les opérations plus bas

df2 <- df2 %>% 
  rename(
    life_exp = "Life expectancy",
    country = "name",
    year = "time", 
    iso_code = "geo"
    )

# Ajouter une variable pour les continents

df2$continent <- countrycode(sourcevar = df2$country,
                            origin = "country.name",
                            destination = "continent")

# Mettre iso_code en majuscule comme df1 et faciliter la combinaison plus bas 

df2 <- data.frame(lapply(df2, function(v) {
  if (is.character(v)) return(toupper(v))
  else return(v)
}))

```

```{r}

# Sélectionner quelques variables d'intérêt

df1 <- df1 %>% dplyr::select(iso_code, country, population, year, gdp, ghg_per_capita)

# Ajouter la variable du PIB/habitant 

df1 <- df1 %>% mutate(
    gdp_per_capita = (gdp / population)
)

```

Vous pouvez, voire devriez, inclure plus d'éléments que ceux demandés ci-bas afin de produire un rapport plus exhaustif:

○ Présenter un ou des beaux tableaux avec plusieurs variables d'intérêts en montrant les statistiques descriptives classiques (moyennes, écart-types, données manquantes, etc.). À vous de déterminer comment il est mieux de présenter les données globales.

■ Conseil: vous avez vu ou lu comment calculer plusieurs statistiques en même temps.

■ Présenter les mêmes tableaux en regroupant les données par continents.

```{r}

# Données manquantes (pas de données manquantes dans df2)

sum(is.na(df1$gdp_per_capita))
sum(is.na(df1$ghg_per_capita))
sum(is.na(df2))

# Espérance de vie par pays en 2022  

life_country_2022 <- df2 %>% 
    filter(year == 2022) %>% 
    group_by(country) %>% 
    summarise(life_exp)

datatable(life_country_2022, rownames = FALSE, colnames = c("Pays" = "country", 'Espérance de vie en 2022' = 'life_exp'))

# Âge moyen par continent par année

mean_life_continent <- df2 %>% 
    group_by(year, continent) %>% 
    summarise(
        mean_life_exp = round(mean(life_exp), digits = 1)
    )

datatable(mean_life_continent, rownames = FALSE, colnames = c("Continent" = "continent", 'Espérance de vie moyenne' = 'mean_life_exp', "Année" = "year"))

# Moyenne et écart-type de l'espérance de vie dans le monde par année 

mean_life_world <- df2 %>%
    group_by(year) %>% 
    summarise(
        mean_life_exp = round(mean(life_exp), digits = 1),
        sd_life = round(sd(life_exp, na.rm = TRUE), digits = 1)
    )

datatable(mean_life_world, rownames = FALSE, colnames = c('Espérance de vie moyenne dans le monde' = 'mean_life_exp', "Écart-type de l'espérance de vie entre les pays" = "sd_life", "Année" = "year"))

# Pays avec l'espérance de vie la plus élevée au monde par année 

max_life_country_per_year <- df2 %>% 
    group_by(year) %>% 
    filter(life_exp == max(life_exp))

max_life_country_per_year <- rename(max_life_country_per_year, "max_country" = "country")

# Pays avec l'espérance de vie la plus faible au monde par année 

min_life_country_per_year <- df2 %>% 
    group_by(year) %>% 
    filter(life_exp == min(life_exp))

min_life_country_per_year <- rename(min_life_country_per_year, "min_country" = "country")

# Combiner les 2 tableaux qui précèdent et ajouter l'écart  

comp_life_exp <- min_life_country_per_year %>% 
    left_join(max_life_country_per_year, by = "year") %>% 
    mutate(
        ecart = life_exp.y - life_exp.x
    )

comp_life_exp <- comp_life_exp %>% 
    select(
        year, max_country, life_exp.y, min_country, life_exp.x, ecart
    )

datatable(comp_life_exp, rownames = FALSE, colnames = c("Année" = "year", "Pays à l'espérance de vie la plus élevée" = "max_country", "Espérance de vie la plus élevée" = "life_exp.y", "Pays à l'espérance de vie la plus faible" = "min_country", "Espérance de vie la plus faible" = "life_exp.x", "Écart" = "ecart"))

# Mettre la variable "year" en format "date" dans df2 

df2$year_date <- as.Date(ISOdate(df2$year, 1, 1))

# Calculer le temps depuis l'année de la première observation par pays jusqu'à aujourd'hui, en jours

life_exp_since <- df2 %>%
    group_by(country) %>% 
    mutate(
        time_since = today() - year_date 
    ) %>% 
    filter(
        time_since == max(time_since)
    ) %>% 
    select(-year_date)

datatable(life_exp_since, rownames = FALSE, colnames = c("Nombre de jours depuis la première observation" = "time_since", "Année de la première observation" = "year", "Espérance de vie" = "life_exp", "Continent" = "continent", "Pays" = "country"))

# Exporter les données  

write_csv(mean_life_continent, file = "./data/processed/mean_life_continent.csv")
write_csv(mean_life_world, file = "./data/processed/mean_life_world.csv")
write_csv(comp_life_exp, file = "./data/processed/comp_life_exp.csv")
write_csv(life_exp_since, file = "./data/processed/life_exp_since.csv")
```

```{r}

# Espérance de vie moyenne dans le monde 1800-2100

ggplot(data = mean_life_world) + 
  geom_smooth(mapping = aes(x = year, y = mean_life_exp))

# Espérance de vie par continent 1800-2100

ggplot(data = df2, mapping = aes(y = life_exp, x = year)) + 
  geom_smooth(mapping = aes(color = continent)) 

# Écart entre les pays à l'espérance de vie la plus élevée et la plus faibles 1800-2100 

ggplot(data = comp_life_exp) + 
  geom_smooth(mapping = aes(x = year, y = ecart))


```

1.  Pour l'**analyse** des données de vos données, vous devrez en effectuer deux et décrire les motivations de ces analyses et vos résultats. Les analyses ne sont pas obligées d'être hyper sophistiquées, mais le processus et l'interprétation des résultats doivent se retrouver dans votre document. Il y a énormément de possibilités dans toutes les variables que vous avez. Comme il ne s'agit pas d'un cours de statistiques, la correction sera moins sévère à ce niveau. Tâchez tout de même de démontrer une rigueur peu importe votre niveau de connaissances! Tentez d'expliquer vos résultats en décrivant ce qui peut les influencer, les forces et faiblesses, etc.

```{r}

# Fonction pour combiner les variables d'intérêt de df1 et df2 pour l'année de notre choix 

big_table_year <- function(annee) {
    ghg_gdp_1year <- df1 %>% 
        filter(year == annee)
    life_exp_1year <- df2 %>% 
        filter(year == annee)
    life_exp_1year %>% 
    select(-country, -year) %>% 
    left_join(ghg_gdp_1year, by = "iso_code")
}

# Il manque beaucoup de données dans df1 pour les années les plus récentes, donc nous procédons aux analyses avec l'année 2015 

big_table_year(annee = 2000)
big_table_year(annee = 2015)
big_table_year(annee = 2020)

big_table_2000 <- big_table_year(annee = 2000)
big_table_2010 <- big_table_year(annee = 2010)
big_table_2015 <- big_table_year(annee = 2015)
big_table_2020 <- big_table_year(annee = 2020)

# Exporter les données pour 2015 

write_csv(big_table_2015, file = "./data/processed/big_table_2015.csv")

# Graphique montrant la relation entre le PIB/habitant et les émissions de GES/habitant 

ggplot(data = big_table_2015, mapping = aes(x = gdp_per_capita, y = ghg_per_capita)) + 
  geom_point(mapping = aes(color = continent)) + 
  geom_smooth()

# Graphique montrant la relation entre les émissions de GES/habitant et l'espérance de vie

ggplot(data = big_table_2015, mapping = aes(y = ghg_per_capita, x = life_exp)) + 
  geom_point(mapping = aes(color = continent)) + 
  geom_smooth()

# Graphique montrant la relation entre le PIB/habitant et l'espérance de vie plot 

ggplot(data = big_table_2015, mapping = aes(y = gdp_per_capita, x = life_exp)) + 
  geom_point(mapping = aes(color = continent)) + 
  geom_smooth()

```

```{r}

# Régressions linéaires simples entre :

# 1. Les émissions de GES/habitant et le PIB/habitant 

fit_ghg_gdp <- lm(ghg_per_capita~gdp_per_capita, data = big_table_2015)
summary(fit_ghg_gdp)
confint(fit_ghg_gdp)

# 2. L'espérance de vie et les émissions de GES/habitant 

fit_ghg_life <- lm(life_exp~ghg_per_capita, data = big_table_2015)
summary(fit_ghg_life)
confint(fit_ghg_life)

fit_gdp_life <- lm(life_exp~gdp_per_capita, data = big_table_2015)
summary(fit_gdp_life)
confint(fit_gdp_life)

# Régression linéaire multiple pour prédire l'espérance de vie à partir des émissions de GES/habitant et du PIB/habitant 

fit_life <- lm(life_exp ~ ghg_per_capita + gdp_per_capita, data = big_table_2015)
summary(fit_life)

# Calculer la contribution unique des variables concernant les émissions de GES/habitant et le PIB/habitant pour expliquer l'espérance de vie grâce au R carré semi-partiel (semi-partial R-squared) :

# du PIB/habitant 

summary(fit_life)$r.squared - summary(fit_ghg_life)$r.squared 

# des émissions de GES/habitant 

summary(fit_life)$r.squared - summary(fit_gdp_life)$r.squared 

```
