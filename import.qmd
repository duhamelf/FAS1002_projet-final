---
title: "Titre de votre page d'importation"
title-block-banner: true
description: | 
  Petite description de cette page.
# à changer
date: "2022-12-21"
# Modifier les détails que vous voulez
author:
  - name: "Frédérik-Xavier Duhamel"
    # Votre site web perso ou github
    url: https://github.com/VOTREUSERNAME
    # les champs d'affiliation sont optionnels, vous pouvez les
    # comment out en ajoutant un # devant.
    affiliation: FAS1002
    affiliation-url: https://FAS1002.github.io/A22
    # changer pour votre propre orcid id
    # https://orcid.org/ pour vous inscrire.
    orcid: 0000-0000-0000-0000

# TRUE == Générer une citation pour cette page précise. Pour enlever, mettre false.
citation: true
# Inclure les références que vous utilisez dans vos rapports. Je conseille Zotero pour construire
# ce fichier ou de connecter RStudio directement pour pouvoir citer avec @nom-de-reference.
bibliography: references.bib
---

Il est maintenant le temps de décrire votre projet avant de passer au document suivant, soit l'importation et la manipulation des données.

Je vous conseille d'écrire cette partie en dernier, une fois que vous aurez déjà vos résultats et figures afin d'éviter de réécrire cette page plusieurs fois.

::: callout-important
N'oubliez pas d'inclure vos références sur chacune des pages!
:::

Par exemple:

> Les données proviennent entre autres de @owidenergy.

```{r echo=FALSE, warning=FALSE, message=FALSE}

library(countrycode)
library(fs)
library(lubridate)
library(tidyverse)
library(skimr)
library(gapminder)
library(knitr)
install.packages("DT", repos = "http://cran.us.r-project.org")
library(DT)
```

```{r download, cache=TRUE}

URL1 <- "https://nyc3.digitaloceanspaces.com/owid-public/data/co2/owid-co2-data.csv"

base_path <- path("data", "raw")

fname <- paste(today(), "GHG-emissions.csv", 
               sep = "_")

fpath <- path(base_path, fname)

junk <- dir(path = base_path, pattern = "GHG-emissions.csv") 

# download une fois par jour 


 if (!file.exists(fpath)) {
    file.remove(junk)
    download.file(url = URL1,
                  destfile = fpath)
    paste("Le fichier",
          fpath,
          "n'existait pas, il a donc été téléchargé à l'instant."
)
  } else {
    print(paste("Le fichier",
                fpath,
                "existe déjà, il ne sera pas téléchargé à nouveau.")
) }

df1 <- read_csv(file = path(base_path, fname))


# pas cap de supprimer les données plus à jour wtf how???

```

```{r}

URL2 <- "https://docs.google.com/spreadsheets/d/1RheSon1-q4vFc3AGyupVPH6ptEByE-VtnjOCselU0PE/export?format=xlsx"

base_path <- path("data", "raw")

fname2 <- paste(today(), "life_exp_data.xlsx", 
               sep = "_")

fpath <- path(base_path, fname2)

x <- list.files(path = base_path, pattern = "life_exp_data.xlsx")

y <- stringr::str_extract(string = x, pattern = "[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]")

y <- as_date(y)

# download une fois par mois 

if (identical(x, character(0))) {
    download.file(url = URL2, 
              destfile = fpath) 
        paste("Le fichier",
          fpath,
          "n'existait pas, il a donc été téléchargé à l'instant.")
  } else if (lubridate::month(y) != lubridate::month(today())) {
          unlink(x)
          download.file(url = URL2, 
                        destfile = fpath) 
          print(paste("Le fichier",
                    fpath,
                    "n'existait pas, il a donc été téléchargé à l'instant.")
    )
  } else {
      print(paste("Le fichier",
                fpath,
                "existe déjà, il ne sera pas téléchargé à nouveau.")
      )
  }

# importer une page particuliere avec package read xl

df2 <- readxl::read_xlsx(path = fpath, sheet = "data-for-countries-etc-by-year")




```

```{r}
#renommer colonne mauvais nom pour fct select plus bas

df2 <- df2 %>% 
  rename(
    life_exp = "Life expectancy",
    country = "name",
    year = "time", 
    iso_code = "geo"
    )


#ajouter continent 

df2$continent <- countrycode(sourcevar = df2$country,
                            origin = "country.name",
                            destination = "continent")


# pour avoir iso_code en majuscule aussi comme df1

df2 <- data.frame(lapply(df2, function(v) {
  if (is.character(v)) return(toupper(v))
  else return(v)
}))



```

```{r}

#sélectionner seulement quelques variables

df1 <- df1 %>% dplyr::select(iso_code, country, population, year, gdp, ghg_per_capita)

#ajouter variable gdp/capita 

df1 <- df1 %>% mutate(
    gdp_per_capita = (gdp / population)
)


```

Vous pouvez, voire devriez, inclure plus d'éléments que ceux demandés ci-bas afin de produire un rapport plus exhaustif:

○ Présenter un ou des beaux tableaux avec plusieurs variables d'intérêts en montrant les statistiques descriptives classiques (moyennes, écart-types, données manquantes, etc.). À vous de déterminer comment il est mieux de présenter les données globales.

■ Conseil: vous avez vu ou lu comment calculer plusieurs statistiques en même temps.

■ Présenter les mêmes tableaux en regroupant les données par continents.

```{r}


# données manquantes (pas de données manquantes dans df2)

sum(is.na(df1$gdp_per_capita))
sum(is.na(df1$ghg_per_capita))
sum(is.na(df2))

# life_exp par pays en 2022  

life_country_2022 <- df2 %>% 
    filter(year == 2022) %>% 
    group_by(country) %>% 
    summarise(life_exp)

datatable(life_country_2022, rownames = FALSE, colnames = c("Pays" = "country", 'Espérance de vie en 2022' = 'life_exp'))

#âge moyen par continent par année

mean_life_continent <- df2 %>% 
    group_by(year, continent) %>% 
    summarise(
        mean_life_exp = round(mean(life_exp), digits = 1)
    )

datatable(mean_life_continent, rownames = FALSE, colnames = c("Continent" = "continent", 'Espérance de vie moyenne' = 'mean_life_exp', "Année" = "year"))


#moyenne life exp dans le monde par année 

mean_life_world <- df2 %>%
    group_by(year) %>% 
    summarise(
        mean_life_exp = round(mean(life_exp), digits = 1)
    )

datatable(mean_life_world, rownames = FALSE, colnames = c('Espérance de vie moyenne dans le monde' = 'mean_life_exp', "Année" = "year"))

#écart-type par année 

sd_annual <- df2 %>% 
    group_by(year) %>% 
    summarise(
        ecart = round(sd(life_exp, na.rm = TRUE), digits = 1)
        )

datatable(sd_annual, rownames = FALSE, colnames = c("Écart-type de l'espérance de vie entre les pays" = "ecart", "Année" = "year"))

#tableau avec pays plus haute life_exp au monde par année 

max_life_country_per_year <- df2 %>% 
    group_by(year) %>% 
    filter(life_exp == max(life_exp))

max_life_country_per_year <- rename(max_life_country_per_year, "max_country" = "country")
    

#tableau avec pays plus basse life_exp au monde par année 

min_life_country_per_year <- df2 %>% 
    group_by(year) %>% 
    filter(life_exp == min(life_exp))

min_life_country_per_year <- rename(min_life_country_per_year, "min_country" = "country")


# combiner les 2 tableaux qui précèdent pour avoir un cool tableau avec max et min et écart 

comp_life_exp <- min_life_country_per_year %>% 
    left_join(max_life_country_per_year, by = "year") %>% 
    mutate(
        ecart = life_exp.y - life_exp.x
    )

comp_life_exp <- comp_life_exp %>% 
    select(
        year, max_country, life_exp.y, min_country, life_exp.x, ecart
    )

datatable(comp_life_exp, rownames = FALSE, colnames = c("Année" = "year", "Pays à l'espérance de vie la plus élevée" = "max_country", "Espérance de vie la plus élevée" = "life_exp.y", "Pays à l'espérance de vie la plus faible" = "min_country", "Espérance de vie la plus faible" = "life_exp.x", "Écart" = "ecart"))
```

○ Une variable d'intérêt que vous devrez calculer est le temps écoulé en jours entre la production (rendering) de votre rapport et la première année que des données ont été récoltées pour chacun des pays qui se trouvent dans le jeu de données de Life Expectancy at Birth.

```{r}

# mettre year en format date, prendre 1er janvier ok? 

df2$year_date <- as.Date(ISOdate(df2$year, 1, 1))

# calcule le temps depuis l'année jusqu'à ajd

life_exp_since <- df2 %>%
    group_by(country) %>% 
    mutate(
        time_since = today() - year_date 
    ) %>% 
    filter(
        time_since == max(time_since)
    ) %>% 
    select(-year_date)

datatable(life_exp_since, rownames = FALSE)
```

○ Vous pouvez également inclure des graphiques descriptifs représentant la distribution des données, etc.

○ Conseil: Il s'agit d'une bonne page pour rendre accessible le téléchargement des données.

```{r}

#graph life exp dans le temps 

ggplot(data = df2) + 
  geom_smooth(mapping = aes(x = year, y = life_exp))



```

```{r}

#graph écart max-min dans le temps 

ggplot(data = comp_life_exp) + 
  geom_smooth(mapping = aes(x = year, y = ecart))
```

1.  Pour l'**analyse** des données de vos données, vous devrez en effectuer deux et décrire les motivations de ces analyses et vos résultats. Les analyses ne sont pas obligées d'être hyper sophistiquées, mais le processus et l'interprétation des résultats doivent se retrouver dans votre document. Il y a énormément de possibilités dans toutes les variables que vous avez. Comme il ne s'agit pas d'un cours de statistiques, la correction sera moins sévère à ce niveau. Tâchez tout de même de démontrer une rigueur peu importe votre niveau de connaissances! Tentez d'expliquer vos résultats en décrivant ce qui peut les influencer, les forces et faiblesses, etc.

```{r}


# selecting one year to compare 

ghg_gdp_2010 <- df1 %>% 
    filter(year == 2010)

life_exp_2010 <- df2 %>% 
    filter(year == 2010)

#combining data frames for 2010 to have one row per country/year 

life_ghg_gdp_2010 <- life_exp_2010 %>% 
    select(-country, -year) %>% 
    left_join(ghg_gdp_2010, by = "iso_code")

# possible simplifier/automatiser changement d'année?



```

```{r}
# function changer année pour table combinée? 



big_table_year <- function(annee) {
    ghg_gdp_1year <- df1 %>% 
        filter(year == annee)
    life_exp_1year <- df2 %>% 
        filter(year == annee)
    life_exp_1year %>% 
    select(-country, -year) %>% 
    left_join(ghg_gdp_1year, by = "iso_code")
}

big_table_year(annee = 2000)
big_table_year(annee = 2010)
big_table_year(annee = 2020)

#manque bcp de données après 2010

big_table_2000 <- big_table_year(annee = 2000)
big_table_2010 <- big_table_year(annee = 2010)
big_table_2020 <- big_table_year(annee = 2020)


# plot ghg/capita vs gdp/capita 

ggplot(data = big_table_2010, mapping = aes(x = gdp_per_capita, y = ghg_per_capita)) + 
  geom_point(mapping = aes(color = continent)) + 
  geom_smooth()

#plot ghg/capita vs life_exp

ggplot(data = big_table_2010, mapping = aes(y = ghg_per_capita, x = life_exp)) + 
  geom_point(mapping = aes(color = continent)) + 
  geom_smooth()

#plot gdp/capita vs life_exp

ggplot(data = big_table_2010, mapping = aes(y = gdp_per_capita, x = life_exp)) + 
  geom_point(mapping = aes(color = continent)) + 
  geom_smooth()



```

```{r}


```
