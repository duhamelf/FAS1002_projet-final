{
  "hash": "9a1e306d864f4cb30acc5dc7fcb5c00d",
  "result": {
    "markdown": "---\ntitle: \"Titre de votre page d'importation\"\ntitle-block-banner: true\ndescription: | \n  Petite description de cette page.\n# à changer\ndate: \"2022-12-21\"\n# Modifier les détails que vous voulez\nauthor:\n  - name: \"Prénom Nom\"\n    # Votre site web perso ou github\n    url: https://github.com/VOTREUSERNAME\n    # les champs d'affiliation sont optionnels, vous pouvez les\n    # comment out en ajoutant un # devant.\n    affiliation: FAS1002\n    affiliation-url: https://FAS1002.github.io/A22\n    # changer pour votre propre orcid id\n    # https://orcid.org/ pour vous inscrire.\n    orcid: 0000-0000-0000-0000\n\n# TRUE == Générer une citation pour cette page précise. Pour enlever, mettre false.\ncitation: true\n# Inclure les références que vous utilisez dans vos rapports. Je conseille Zotero pour construire\n# ce fichier ou de connecter RStudio directement pour pouvoir citer avec @nom-de-reference.\nbibliography: references.bib\n---\n\n\nIl est maintenant le temps de décrire votre projet avant de passer au document suivant, soit l'importation et la manipulation des données.\n\nJe vous conseille d'écrire cette partie en dernier, une fois que vous aurez déjà vos résultats et figures afin d'éviter de réécrire cette page plusieurs fois.\n\n::: callout-important\nN'oubliez pas d'inclure vos références sur chacune des pages!\n:::\n\nPar exemple:\n\n> Les données proviennent entre autres de @owidenergy.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell hash='import_cache/html/download_ee3709737e7e1ca5e3ed03b2f13c3273'}\n\n```{.r .cell-code}\nURL1 <- \"https://nyc3.digitaloceanspaces.com/owid-public/data/co2/owid-co2-data.csv\"\n\nbase_path <- path(\"data\", \"raw\")\n\nfname <- paste(today(), \"GHG-emissions.zip\", \n               sep = \"_\")\n\nfpath <- path(base_path, fname)\n\ndownload.file(url = URL1, \n              destfile = fpath) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#prax \n#unzip(zipfile = fpath, \n #     exdir = base_path)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file(\"https://docs.google.com/spreadsheets/d/1RheSon1-q4vFc3AGyupVPH6ptEByE-VtnjOCselU0PE/export?format=xlsx\", destfile = \"./data/raw/life_exp_data.xlsx\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- read_csv(file = path(base_path, \"2022-12-07_GHG-emissions.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 46523 Columns: 74\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): country, iso_code\ndbl (72): year, population, gdp, cement_co2, cement_co2_per_capita, co2, co2...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# importer une page particuliere avec package read xl\n\ndf2 <-  readxl::read_xlsx(\"./data/raw/life_exp_data.xlsx\", sheet = \"data-for-countries-etc-by-year\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#renommer colonne mauvais nom pour fct select plus bas\n\ndf2 <- df2 %>% \n  rename(\n    life_exp = \"Life expectancy\",\n    country = \"name\",\n    year = \"time\", \n    iso_code = \"geo\"\n    )\n\ndf2 <- data.frame(lapply(df2, function(v) {\n  if (is.character(v)) return(toupper(v))\n  else return(v)\n}))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- df1 %>% dplyr::select(iso_code, country, year, gdp, co2_per_capita)\n```\n:::\n\n\n```{}\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# petits df pour tester binding & shit \n\ndf3 <- head(df1, 500)\ndf4 <- head(df2, 500)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# mettre les deux df ensemble \n\n\ninner <- inner_join(df3, df4, by = \"iso_code\") \n\n\n# table <- dplyr::bind_rows(df1, df2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#garder seulement les variables pertinentes pour l'analyse \n\n# table <- table %>% dplyr::select(country, year, gdp, co2_per_capita, life_exp)\n\n# no good \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# gs4_auth()\n\n# gs4_find()\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n df1 <- as_tibble(df1)\n```\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}