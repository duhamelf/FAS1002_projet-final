{
  "hash": "a9c9070ed21442c808dcf2d653ca9ea1",
  "result": {
    "markdown": "---\ntitle: \"Titre de votre page d'importation\"\ntitle-block-banner: true\ndescription: | \n  Petite description de cette page.\n# à changer\ndate: \"2022-12-21\"\n# Modifier les détails que vous voulez\nauthor:\n  - name: \"Frédérik-Xavier Duhamel\"\n    # Votre site web perso ou github\n    url: https://github.com/VOTREUSERNAME\n    # les champs d'affiliation sont optionnels, vous pouvez les\n    # comment out en ajoutant un # devant.\n    affiliation: FAS1002\n    affiliation-url: https://FAS1002.github.io/A22\n    # changer pour votre propre orcid id\n    # https://orcid.org/ pour vous inscrire.\n    orcid: 0000-0000-0000-0000\n\n# TRUE == Générer une citation pour cette page précise. Pour enlever, mettre false.\ncitation: true\n# Inclure les références que vous utilisez dans vos rapports. Je conseille Zotero pour construire\n# ce fichier ou de connecter RStudio directement pour pouvoir citer avec @nom-de-reference.\nbibliography: references.bib\n---\n\n\nIl est maintenant le temps de décrire votre projet avant de passer au document suivant, soit l'importation et la manipulation des données.\n\nJe vous conseille d'écrire cette partie en dernier, une fois que vous aurez déjà vos résultats et figures afin d'éviter de réécrire cette page plusieurs fois.\n\n::: callout-important\nN'oubliez pas d'inclure vos références sur chacune des pages!\n:::\n\nPar exemple:\n\n> Les données proviennent entre autres de @owidenergy.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n\nThe downloaded binary packages are in\n\t/var/folders/0t/x9zwmhfs68332zvxfh4bm0_r0000gq/T//RtmpOnkCp4/downloaded_packages\n```\n:::\n:::\n\n::: {.cell hash='import_cache/html/download_160b5d578db6cb7e1546476ca9363029'}\n\n```{.r .cell-code}\nURL1 <- \"https://nyc3.digitaloceanspaces.com/owid-public/data/co2/owid-co2-data.csv\"\n\nbase_path <- path(\"data\", \"raw\")\n\nfname <- paste(today(), \"GHG-emissions.csv\", \n               sep = \"_\")\n\nfpath <- path(base_path, fname)\n\n# download une fois par jour \n\n\n if (!file.exists(fpath)) {\n    download.file(url = URL1,\n                  destfile = fpath)\n    paste(\"Le fichier\",\n          fpath,\n          \"n'existait pas, il a donc été téléchargé à l'instant.\"\n)\n  } else {\n    print(paste(\"Le fichier\",\n                fpath,\n                \"existe déjà, il ne sera pas téléchargé à nouveau.\")\n) }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Le fichier data/raw/2022-12-17_GHG-emissions.csv existe déjà, il ne sera pas téléchargé à nouveau.\"\n```\n:::\n\n```{.r .cell-code}\ndf1 <- read_csv(file = path(base_path, fname))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 46523 Columns: 74\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): country, iso_code\ndbl (72): year, population, gdp, cement_co2, cement_co2_per_capita, co2, co2...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nURL2 <- \"https://docs.google.com/spreadsheets/d/1RheSon1-q4vFc3AGyupVPH6ptEByE-VtnjOCselU0PE/export?format=xlsx\"\n\nbase_path <- path(\"data\", \"raw\")\n\nfname2 <- paste(today(), \"life_exp_data.xlsx\", \n               sep = \"_\")\n\nfpath <- path(base_path, fname2)\n\nx <- list.files(path = base_path, pattern = \"life_exp_data.xlsx\")\n\ny <- stringr::str_extract(string = x, pattern = \"[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\")\n\ny <- as_date(y)\n\n# download une fois par mois \n\nif (identical(x, character(0))) {\n    download.file(url = URL2, \n              destfile = fpath) \n        paste(\"Le fichier\",\n          fpath,\n          \"n'existait pas, il a donc été téléchargé à l'instant.\")\n  } else if (lubridate::month(y) != lubridate::month(today())) {\n          unlink(x)\n          download.file(url = URL2, \n                        destfile = fpath) \n          print(paste(\"Le fichier\",\n                    fpath,\n                    \"n'existait pas, il a donc été téléchargé à l'instant.\")\n    )\n  } else {\n      print(paste(\"Le fichier\",\n                fpath,\n                \"existe déjà, il ne sera pas téléchargé à nouveau.\")\n      )\n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Le fichier data/raw/2022-12-17_life_exp_data.xlsx existe déjà, il ne sera pas téléchargé à nouveau.\"\n```\n:::\n\n```{.r .cell-code}\n# importer une page particuliere avec package read xl\n\ndf2 <- readxl::read_xlsx(path = fpath, sheet = \"data-for-countries-etc-by-year\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#faire une fonction pour df2 et df1?? quel mot change mettre comme argument de ma fct, url, fname, ..? sinon laisser faire, fonction plus bas pr autre chose \n\n# download_desfois <- function(ext) {\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#renommer colonne mauvais nom pour fct select plus bas\n\ndf2 <- df2 %>% \n  rename(\n    life_exp = \"Life expectancy\",\n    country = \"name\",\n    year = \"time\", \n    iso_code = \"geo\"\n    )\n\n\n#ajouter continent \n\ndf2$continent <- countrycode(sourcevar = df2$country,\n                            origin = \"country.name\",\n                            destination = \"continent\")\n\n\n# pour avoir iso_code en majuscule aussi comme df1\n\ndf2 <- data.frame(lapply(df2, function(v) {\n  if (is.character(v)) return(toupper(v))\n  else return(v)\n}))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#sélectionner seulement quelques variables\n\ndf1 <- df1 %>% dplyr::select(iso_code, country, year, gdp, co2_per_capita)\n```\n:::\n\n\nVous pouvez, voire devriez, inclure plus d'éléments que ceux demandés ci-bas afin de produire un rapport plus exhaustif:\n\n○ Présenter un ou des beaux tableaux avec plusieurs variables d'intérêts en montrant les statistiques descriptives classiques (moyennes, écart-types, données manquantes, etc.). À vous de déterminer comment il est mieux de présenter les données globales.\n\n■ Conseil: vous avez vu ou lu comment calculer plusieurs statistiques en même temps.\n\n■ Présenter les mêmes tableaux en regroupant les données par continents.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# beau tableau = soit cable dans quarto option pr activer automatiquement ou package DT \n\nlibrary(DT)\n\n#faut commencer par présenter données manquantes etc de tout le dataframe? \n\n# life_exp par pays en 2022  \n\nlife_country_2022 <- df2 %>% \n    filter(year == 2022) %>% \n    group_by(country) %>% \n    summarise(life_exp)\n\n#âge moyen par continent par année\n\nmean_life_continent <- df2 %>% \n    group_by(year, continent) %>% \n    summarise(\n        mean_life_exp = mean(life_exp, na.rm = TRUE)\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n#moyenne life exp dans le monde par année \nmean_world <- df2 %>%\n    group_by(year) %>% \n    summarise(\n        mean_life_exp = mean(life_exp)\n    )\n\n\n#écart-type par année \n\nsd_annual <- df2 %>% \n    group_by(year) %>% \n    summarise(\n        ecart = sd(life_exp, na.rm = TRUE)\n        )\n\n\n#écart entre max et min life_exp jusqu'à ajd \n\necart <- df2 %>%\n    group_by(year) %>%\n    summarise(\n        max = max(life_exp),\n        min = min(life_exp), \n        ecart = max - min,\n    )  %>%\n    filter(year <= 2022)\n\n\n#tableau avec pays plus haute life_exp au monde par année \n\nmax_life_country_per_year <- df2 %>% \n    group_by(year) %>% \n    filter(life_exp == max(life_exp))\n    \n\n#tableau avec pays plus basse life_exp au monde par année \n\nmin_life_country_per_year <- df2 %>% \n    group_by(year) %>% \n    filter(life_exp == min(life_exp))\n\n\n# combiner les 3 tableaux qui précèdent?? \n```\n:::\n\n\n○ Une variable d'intérêt que vous devrez calculer est le temps écoulé en jours entre la production (rendering) de votre rapport et la première année que des données ont été récoltées pour chacun des pays qui se trouvent dans le jeu de données de Life Expectancy at Birth.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pour enlever les NAs, mais semble qu'il n'y en a pas (mm nombre d'observations)\nlife_exp_ecomplete <- df2[complete.cases(df2), ]\n\n# mettre year en format date, prendre 1er janvier ok? \n\ndf2$year <- as.Date(ISOdate(df2$year, 1, 1))\n\n# calcule le temps depuis l'année jusqu'à ajd\n\nlife_exp_since <- df2 %>%\n    group_by(country) %>% \n    mutate(\n        time_since = today() - year \n    ) %>% \n    filter(\n        time_since == max(time_since)\n    )\n```\n:::\n\n\n○ Vous pouvez également inclure des graphiques descriptifs représentant la distribution des données, etc.\n\n○ Conseil: Il s'agit d'une bonne page pour rendre accessible le téléchargement des données.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#graph life exp dans le temps \n\nggplot(data = df2) + \n  geom_smooth(mapping = aes(x = year, y = life_exp))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](import_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#graph écart max-min dans le temps \n\nggplot(data = ecart) + \n  geom_smooth(mapping = aes(x = year, y = ecart))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](import_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n1.  Pour l'**analyse** des données de vos données, vous devrez en effectuer deux et décrire les motivations de ces analyses et vos résultats. Les analyses ne sont pas obligées d'être hyper sophistiquées, mais le processus et l'interprétation des résultats doivent se retrouver dans votre document. Il y a énormément de possibilités dans toutes les variables que vous avez. Comme il ne s'agit pas d'un cours de statistiques, la correction sera moins sévère à ce niveau. Tâchez tout de même de démontrer une rigueur peu importe votre niveau de connaissances! Tentez d'expliquer vos résultats en décrivant ce qui peut les influencer, les forces et faiblesses, etc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# selecting one year to compare \n\nghg_gdp_2010 <- df1 %>% \n    filter(year == 2010)\n\nlife_exp_2010 <- df2 %>% \n    filter(year == 2010)\n\n#combining data frames for 2010 to have one row per country/year \n\nlife_ghg_gdp_2010 <- life_exp_2010 %>% \n    select(-country, -year) %>% \n    left_join(ghg_gdp_2010, by = \"iso_code\")\n\n# possible simplifier/automatiser changement d'année?\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# function changer année pour table combinée? \n\n\n\n\nbig_table_year <- function(annee) {\n    ghg_gdp_1year <- df1 %>% \n        filter(year == annee)\n    life_exp_1year <- df2 %>% \n        filter(year == annee)\n    life_exp_1year %>% \n    select(-country, -year) %>% \n    left_join(ghg_gdp_1year, by = \"iso_code\")\n}\n\nbig_table_year(annee = 2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] iso_code       life_exp       continent      country        year          \n[6] gdp            co2_per_capita\n<0 rows> (or 0-length row.names)\n```\n:::\n\n```{.r .cell-code}\nbig_table_year(annee = 2010)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] iso_code       life_exp       continent      country        year          \n[6] gdp            co2_per_capita\n<0 rows> (or 0-length row.names)\n```\n:::\n\n```{.r .cell-code}\nbig_table_year(annee = 2020)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] iso_code       life_exp       continent      country        year          \n[6] gdp            co2_per_capita\n<0 rows> (or 0-length row.names)\n```\n:::\n\n```{.r .cell-code}\nbig_table_2030 <- big_table_year(annee = 2030)\n\n# fonctionne, mtn voir problème affichage de country selon les années ??\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# graph ghg/gdp, good? \n\nggplot(data = life_ghg_gdp_2010) + \n  geom_smooth(mapping = aes(x = co2_per_capita, y = gdp)) +\n      geom_point(mapping = aes(x = co2_per_capita, y = gdp))\n```\n\n::: {.cell-output-display}\n![](import_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# graph ghg/life exp good? \n\nggplot(data = life_ghg_gdp_2010) + \n  geom_smooth(mapping = aes(y = co2_per_capita, x = life_exp)) +\n      geom_point(mapping = aes(y = co2_per_capita, x = life_exp))\n```\n\n::: {.cell-output-display}\n![](import_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}